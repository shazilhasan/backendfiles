const recruiterService = require('../service/recruiterService')
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const User = require('../model/userModel')
const studentService = require('../service/studentService')
const nodemailer = require('nodemailer')

 function generateRandomPassword(length = 8) {
  const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+';
  let password = '';

  for (let i = 0; i < length; i++) {
    const randomIndex = Math.floor(Math.random() * charset.length);
    password += charset.charAt(randomIndex);
  }

  return password;
}

async function createRecruiter(req, res) {
  const recruiterData = req.body;
  try {
    console.log(recruiterData, 'recruiterData');
    const newRecruiter = await recruiterService.createRecruiter(recruiterData);

    // Generate a random password for the recruiter
    const autogeneratedPassword = generateRandomPassword();

    // Create a User object with the autogenerated password
    const newUser = new User({
      email: recruiterData.email,
      password: autogeneratedPassword,
      role: 'recruiter',
      recruiter_id: newRecruiter._id,
    });

    // Save the new user to the database
    newUser.save();

    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'sharmanikita33373@gmail.com',
        pass: 'odyfznjkzsgyxfyx',
      },
    });

    const mailOptions = {
      from: 'sharmanikita33373@gmail.com',
      to: newRecruiter.email,
      subject: 'Welcome to Your Company - Recruiter Registration',
      text: `Hello ${newRecruiter.companyName},\n\n` +
        `Thank you for registering as a recruiter with Your Company.\n\n` +
        `Your autogenerated password: ${autogeneratedPassword}\n\n` +
        `Please use this password to log in to your account.\n\n` +
        `If you have any questions or need assistance, please contact us.\n\n` +
        `Best regards,\n` +
        `Your Company Team`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error('Error sending email:', error);
        return res.status(500).json({ error: 'Internal server error' });
      } else {
        console.log('Email sent:', info.response);
        return res.status(201).json({ message: 'Recruiter registered successfully', data: newRecruiter });
      }
    });
  } catch (error) {
    console.error('Error creating recruiter:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}



async function getAllRecruiters(req, res) {
  try {
    const recruiters = await recruiterService.getAllRecruiters();
    return res.status(200).json({ data: recruiters });
  } catch (error) {
    console.error('Error getting recruiters:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

async function updateRecruiterStatus(req, res) {
  const { studentId, recruiterStatus, feedbackStatus } = req.body;
  try {
    const updatedStudent = await recruiterService.updateRecruiterStatus(
      studentId,
      recruiterStatus,
      feedbackStatus
    );
    if (!updatedStudent) {
      return res.status(404).json({ error: 'Student not found' });
    }
    return res.status(200).json(updatedStudent);
  } catch (error) {
    console.error('Error updating recruiter status:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}

async function login(req, res) {
    const { email, password } = req.body;
  
    try {
      const token = await recruiterService.login(email, password);
  
      if (!token) {
        return res.status(401).json({ error: 'Invalid credentials' });
      }
  
      // Return a success message along with the token
      return res.status(200).json({ message: 'Login successful', token });
    } catch (error) {
      console.error('Error during login:', error);
      return res.status(500).json({ error: 'Internal server error' });
    }
}
  

async function sendProfile(req, res) {
  const { recruiterId } = req.params;
  const { sharedStudentIds } = req.body;

  try {
    const updatedRecruiter = await recruiterService.sendProfile(recruiterId, sharedStudentIds);

    if (!updatedRecruiter) {
      return res.status(404).json({ error: 'Recruiter not found' });
    }

    // Fetch the recruiter's company name from the updatedRecruiter object
    const recruiterCompanyName = updatedRecruiter.companyName;

    // Loop through sharedStudentIds and send interview emails to each student
    for (const studentId of sharedStudentIds) {
      const student = await studentService.getStudentById(studentId);
      if (student) {
        const studentEmail = student.email;
        const interviewDetails = `Interview with ${recruiterCompanyName}`;
        
        await studentService.sendInterviewSchedule(studentEmail, interviewDetails, recruiterCompanyName);
      }
    }

    return res.json({ message: 'Selected students sent to the recruiter successfully' });
  } catch (error) {
    console.error('Error sending students to the recruiter:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}


module.exports = {
  createRecruiter,
  updateRecruiterStatus,
  login,
  getAllRecruiters,
  sendProfile
};
